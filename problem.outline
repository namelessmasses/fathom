-*- mode: outline -*-

* Fathom Python ML Task

* 1. Continuously capture images from webcam
** OpenCV
*** Provides access to webcam
*** Filters and transforms
** PIL
*** Filters and transforms but no access to camera
** skimage
*** Similar to PIL; Filters and transforms but no access to camera

* 2. Perform a series of computations on each frame
** 2.1 Diagnostics to compute
*** 2.1.1. mean and standard deviation of the pixels in the GREEN channel
**** 2.1.2. D4sigma and centroid of each color channel (R,G,B) and direction
**** 2.1.3. The acquisition refresh rate and number of saturated pixels

* 3. Classify each frame using a pre-trained deep learning model
** (?) ImageNet (https://keras.io/applications
** (?) skimage

* 4. Display the information in real-time

Notes:

* 2.1.1
** Separate image channels (RGB)
*** For the GREEN channel
**** Compute mean and standard deviation of the pixel values
***** np 'flattens' multi-dimensional arrays first
****** np.mean(green) or green.mean()
****** np.std(green) or green.std()

* 2.1.2
** Separate image channels (RGB)
*** red = img[:,:,2]
*** green = img[:,:,1]
*** blue = img[:,:,0]
** For every channel
*** D4sigma
If my math is correct then sigma(x) and sigma(y) can be calculated using
raw moments analogously to 1-dimension. In 1D sigma is M2/M0 - (M1/M0)^2.
Deriving from first principles

sigma^2(x) = M20/M00 - (M10/M00)^2
sigma^2(y) = M02/M00 - (M01/M00)^2

*** centroid	
**** http://aishack.in/tutorials/image-moments/
**** Using moments.
***** skimage
m = skimage.measure.moments(singleChannel)
centroid = (m(1,0)/m(0,0), m(0,1)/m(0,0))
***** opencv
moments = cv2.moments(singleChannel)
centroid = (moments['m10']/moments['m00'], moments['m01']/moments['m00'])


* 2.1.3
** Acquisition Rate
*** Timestamp of each frame
*** sum differences between timestamps
*** rate = count / sum
** Number of Saturated Pixels
** Based on Saturation of HSV
*** hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
*** saturations = hsv[:,:,1]
*** saturated = saturations.flatten() == 255
*** saturated.sum()
** Based on whether any channel of any pixel is saturated
*** len([1 for row in ary for col in range(len(row)) if (row[col] == 255).any()])

* Splitting Image Channels
** Images are multi dimensional arrays; pixels of BGR
*** Need slices of
**** B: [:,:,0]
**** G: [:,:,1]
**** R: [:,:,2]

* Mean and Std
** ary.mean()
** ary.std()
